AWSTemplateFormatVersion: '2010-09-09'
Description: A complete API Gateway template
Resources:

  UsersDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "users"
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaTest:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Test"
      Runtime: "nodejs14.x"
      Handler: "index.handler"
      Role: "arn:aws:iam::448001105130:role/LabRole"
      Code:
        S3Bucket: "login-b00917801"
        S3Key: "login.zip"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: testAPI

  LambdaTestPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaTest
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
#Login resource
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "login"

  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  LoginMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTest.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

# #Register resource
#   RegisterResource:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ParentId: !GetAtt ApiGateway.RootResourceId
#       PathPart: "register"

#   RegisterOptionsMethod:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref RegisterResource
#       HttpMethod: OPTIONS
#       Integration:
#         IntegrationResponses:
#           - StatusCode: 200
#             ResponseParameters:
#               "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
#               "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
#               "method.response.header.Access-Control-Allow-Origin": "'*'"
#             ResponseTemplates:
#               "application/json": ""
#         PassthroughBehavior: WHEN_NO_MATCH
#         RequestTemplates:
#           "application/json": '{"statusCode": 200}'
#         Type: MOCK
#       MethodResponses:
#         - StatusCode: 200
#           ResponseParameters:
#             "method.response.header.Access-Control-Allow-Headers": true
#             "method.response.header.Access-Control-Allow-Methods": true
#             "method.response.header.Access-Control-Allow-Origin": true
#           ResponseModels:
#             "application/json": "Empty"

#   RegisterMethod:
#     Type: "AWS::ApiGateway::Method"
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref RegisterResource
#       AuthorizationType: NONE
#       HttpMethod: POST
#       Integration:
#         Type: AWS_PROXY # Changed from AWS
#         IntegrationHttpMethod: POST
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTest.Arn}/invocations"
#         PassthroughBehavior: WHEN_NO_TEMPLATES # Added PassthroughBehavior
#         IntegrationResponses:
#           - StatusCode: 200
#             ResponseTemplates:
#               application/json: $input.json('$')
#             ResponseParameters:
#               method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#               method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
#               method.response.header.Access-Control-Allow-Origin: "'*'"
#         RequestTemplates:
#           application/json: $input.json('$')
#       MethodResponses:
#         - StatusCode: 200
#           ResponseModels:
#             application/json: "Empty"
#           ResponseParameters:
#             method.response.header.Access-Control-Allow-Headers: true
#             method.response.header.Access-Control-Allow-Methods: true
#             method.response.header.Access-Control-Allow-Origin: true

# #Verify resource
#   VerifyResource:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ParentId: !GetAtt ApiGateway.RootResourceId
#       PathPart: "verify"

#   VerifyOptionsMethod:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref VerifyResource
#       HttpMethod: OPTIONS
#       Integration:
#         IntegrationResponses:
#           - StatusCode: 200
#             ResponseParameters:
#               "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
#               "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
#               "method.response.header.Access-Control-Allow-Origin": "'*'"
#             ResponseTemplates:
#               "application/json": ""
#         PassthroughBehavior: WHEN_NO_MATCH
#         RequestTemplates:
#           "application/json": '{"statusCode": 200}'
#         Type: MOCK
#       MethodResponses:
#         - StatusCode: 200
#           ResponseParameters:
#             "method.response.header.Access-Control-Allow-Headers": true
#             "method.response.header.Access-Control-Allow-Methods": true
#             "method.response.header.Access-Control-Allow-Origin": true
#           ResponseModels:
#             "application/json": "Empty"

#   VerifyMethod:
#     Type: "AWS::ApiGateway::Method"
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref VerifyResource
#       AuthorizationType: NONE
#       HttpMethod: POST
#       Integration:
#         Type: AWS_PROXY # Changed from AWS
#         IntegrationHttpMethod: POST
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTest.Arn}/invocations"
#         PassthroughBehavior: WHEN_NO_TEMPLATES # Added PassthroughBehavior
#         IntegrationResponses:
#           - StatusCode: 200
#             ResponseTemplates:
#               application/json: $input.json('$')
#             ResponseParameters:
#               method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#               method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
#               method.response.header.Access-Control-Allow-Origin: "'*'"
#         RequestTemplates:
#           application/json: $input.json('$')
#       MethodResponses:
#         - StatusCode: 200
#           ResponseModels:
#             application/json: "Empty"
#           ResponseParameters:
#             method.response.header.Access-Control-Allow-Headers: true
#             method.response.header.Access-Control-Allow-Methods: true
#             method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LoginMethod
      # - RegisterMethod
      # - RegisterOptionsMethod
      # - VerifyMethod
      # - VerifyOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: production
      Description: Production Stage

# Outputs for the project
Outputs:
  APIGatewayURL:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/production"