AWSTemplateFormatVersion: '2010-09-09'
Resources:
#---------------------------------------DynamoDb (Storage)--------------------------------------
# users table creation
  UserDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

# books table creation
  BooksDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: books
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

#---------------------------------------Lambda Functions (Compute)--------------------------------------
#lambda to perform CRUD operations
  LambdaBackend:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'LambdaBackend'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::448001105130:role/LabRole'
      Code:
        S3Bucket: "b00917801"
        S3Key: "LambdaBackend.zip"
      Runtime: 'nodejs14.x'
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserDynamoDBTable
          BOOK_TABLE_NAME: !Ref BooksDynamoDBTable
          SAVE_BOOK_QUEUE_URL: 
            Fn::Sub: "${SaveBookQueue}"
          DELETE_BOOK_QUEUE_URL: 
            Fn::Sub: "${DeleteBookQueue}"
    DependsOn:
      - SaveBookQueue
      - DeleteBookQueue
      - UserDynamoDBTable
      - BooksDynamoDBTable

#lambda function to give notification
  LambdaNotification:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'LambdaNotification'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::448001105130:role/LabRole'
      Code:
        S3Bucket: "b00917801"
        S3Key: "LambdaNotification.zip"
      Runtime: 'nodejs14.x'
      Environment:
        Variables:
          NotificationSNSArn: !Ref NotificationSNS
    DependsOn:
      - SaveBookQueue
      - DeleteBookQueue
      - NotificationSNS

#---------------------------------------SQS (General)--------------------------------------
#Queue to save book
  SaveBookQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: 'SaveBookQueue'

#Queue to delete book
  DeleteBookQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: 'DeleteBookQueue'

#Trigger LambdaNotification by save queue
  LambdaNotificationSaveBookQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SaveBookQueue.Arn
      FunctionName: !GetAtt LambdaNotification.Arn
      Enabled: true
      BatchSize: 1

#Trigger LambdaNotification by delete queue
  LambdaNotificationDeleteBookQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DeleteBookQueue.Arn
      FunctionName: !GetAtt LambdaNotification.Arn
      Enabled: true
      BatchSize: 1

#---------------------------------------SNS (General)--------------------------------------
#SNS lambda notification to administrator
  NotificationSNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'NotificationSNS'
      Subscription:
        - Protocol: 'email'
          Endpoint: 'pandeymayank015@gmail.com'

#---------------------------------------API Gateway (Network)--------------------------------------
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bookavengersAPI
  
  LambdaBackendPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaBackend
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

#Login resource created
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "login"

  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  LoginMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

#Register resource created
  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "register"

  RegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RegisterResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  RegisterMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RegisterResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

#Book resource created
  BooksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "books"

  BooksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BooksResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  BooksMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BooksResource
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

#Book resource created
  BookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "book"

  BookOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BookResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,PATCH'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

#Get book created
  GetBookMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BookResource
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Post book created
  PostBookMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BookResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Delete book created
  DeleteBookMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BookResource
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Update book creates
  PatchBookMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BookResource
      AuthorizationType: NONE
      HttpMethod: PATCH
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBackend.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Deploying API 
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LoginMethod
      - RegisterMethod
      - BooksMethod
      - GetBookMethod
      - PostBookMethod
      - DeleteBookMethod
      - PatchBookMethod

    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: prod
      Description: Production Stage

#---------------------------------------Elastic Beanstalk (Compute)--------------------------------------
# Deploying frontend on elastic beanstalk
  BooksFrontendApplication:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      Description: "Elastic Beanstalk Application for the Frontend"
      ApplicationName: "BooksDistribution"

  BooksFrontendAppVersion:
    Type: "AWS::ElasticBeanstalk::ApplicationVersion"
    Properties:
      ApplicationName: !Ref BooksFrontendApplication
      Description: "Application Version of the Frontend App"
      SourceBundle:
        S3Bucket: "b00917801"
        S3Key: "Archive.zip"

  BooksFrontendAppConfigTemplate:
    Type: "AWS::ElasticBeanstalk::ConfigurationTemplate"
    Properties:
      ApplicationName: !Ref BooksFrontendApplication
      Description: "Configuration Template for the Frontend App"
      SolutionStackName: "64bit Amazon Linux 2 v5.8.4 running Node.js 18"
      OptionSettings:
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: "InstanceType"
          Value: "t3.micro"
        - Namespace: "aws:elasticbeanstalk:environment:proxy"
          OptionName: "ProxyServer"
          Value: "nginx"
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: "IamInstanceProfile"
          Value: "LabInstanceProfile"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "ServiceRole"
          Value: "arn:aws:iam::448001105130:role/LabRole"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "REACT_APP_API_ENDPOINT"
          Value: 
            Fn::Sub: "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"

  BooksFrontendAppEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    Properties:
      ApplicationName: !Ref BooksFrontendApplication
      EnvironmentName: "BooksFrontendEnv"
      TemplateName: !Ref BooksFrontendAppConfigTemplate
      VersionLabel: !Ref BooksFrontendAppVersion

# Getting output of API and EB
Outputs:
  APIGatewayURL:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  ApplicationURL:
    Description: "URL of the Elastic Beanstalk Frontend application"
    Value:
      Fn::Join:
        - ""
        - - "http://"
          - Fn::GetAtt: [BooksFrontendAppEnvironment, EndpointURL]
